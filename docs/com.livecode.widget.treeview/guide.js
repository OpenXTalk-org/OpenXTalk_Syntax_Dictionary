{
	"name": "com.livecode.widget.treeview",
	"display name": "Tree View",
	"group": "Extensions",
	"location": "/Users/paul/Desktop/Dev Stuff/OpenXTalk 1.963.1rc5.app/Contents/Tools/Extensions/com.livecode.widget.treeview/docs/guide",
"data":"# Tree View\nThe tree view widget provides a way to represent a LiveCode array \nvisually in various ways. In its simplest form, it allows selection of\nkey/value pairs, and folding and unfolding of nested arrays.\n\n![Tree View widget](images/treeview.png)\n\n## Creating a Tree View\nA tree view widget can be created by dragging it out from the Tools\nPalette, where it appears with the following icon:\n\n<svg viewBox=\"0 170 220 110\" style=\"display:block;margin:auto\" width=\"auto\" height=\"50\">\n  <path d=\"M152.4,249.7c-6.4,0-11.8,4.3-13.5,10.1h-10v-26.7h10c1.7,5.8,7.1,10.1,13.5,10.1c7.8,0,14.1-6.3,14.1-14.1s-6.3-14.1-14.1-14.1c-6.4,0-11.8,4.3-13.5,10.1h-10v-16.1c8.4-1.8,14.8-9.3,14.8-18.3c0-10.4-8.4-18.8-18.8-18.8s-18.8,8.4-18.8,18.8c0,9,6.3,16.5,14.7,18.3v58.8h18c1.7,5.8,7.1,10.1,13.5,10.1c7.8,0,14.1-6.3,14.1-14.1S160.2,249.7,152.4,249.7z M128.7,202h-7.5v-7.5h-7.5V187h7.5v-7.5h7.5v7.5h7.5v7.5h-7.5V202z\" />\n</svg>\n\n\nAlternatively it can be created in script using:\n\n\tcreate widget as \"com.livecode.widget.treeview\"\n\n## Using the Tree View\nThe content of the tree view is controlled by using the `arrayData` \nproperty. The following handlers can be used to set and get data on a \nspecific `pathDelimiter`-delimited path rather than the whole array:\n\n\tcommand setArrayDataOnPath pValue, pPath, @xArray\n\t   local tKey\n\t   set the itemdelimiter to the pathDelimiter of widget 1 of me\n\t   put item 1 of pPath into tKey\n\t   if the number of items in pPath is 1 then\n\t\t  put pValue into xArray[tKey]\n\t   else\n\t\t  delete item 1 of pPath\n\t\t  setArrayDataOnPath pValue, pPath, xArray[tKey]\n\t   end if\n\tend setArrayDataOnPath\n\n\tcommand fetchArrayDataOnPath pPath, pArray, @rData\n\t   local tKey\n\t   set the itemdelimiter to the pathDelimiter of widget 1 of me\n\t   put item 1 of pPath into tKey\n\t   if the number of items in pPath is 1 then\n\t\t  if tKey is not among the keys of pArray then\n\t\t\t return \"no such key\"\n\t\t  else\n\t\t\t put pArray[tKey] into rData\n\t\t\t return empty\n\t\t  end if\n\t   else\n\t\t  delete item 1 of pPath\n\t\t  fetchArrayDataOnPath pPath, pArray[tKey], rData\n\t   end if\n\tend fetchArrayDataOnPath\n\n## Display Properties\nThe tree view widget has a number of display options:\n\n* `alternateRowBackgrounds` - Whether the alternate rows of the widget have different backgrounds or not.\n* `hilitedElement` - The selected row, given by a `pathDelimiter`-delimited path.\n* `readOnly` - Whether the options to modify elements of the underlying array are present or not. See the [Edit Mode](#edit-mode) section for more information on what is not visible in read-only mode.\n* `separatorRatio` - Manipulates the size of the view columns.\n* `showBorder` - Whether the widget has a border or not.\n* `showSeparator` - Whether the separator bar between keys and values is showing or not.\n* `sortOrder` - Manipulates the order in which elements of the tree view are displayed, with respect to the current `sortType`.\n* `sortType` - Manipulates the type of ordering in which elements of the tree view are displayed.\n* `arrayStyle` - Whether the tree view should display its contents in array style or as a standard tree view.\n\n## Edit Mode\nWhen in edit mode, there are a number of additional user-interactions \navailable. The following two show at the end of a given line when the \nmouse hovers over it:\n\n* Delete keys\n\n![Delete array key](images/edit-delete.png)\n\nWhen the delete icon is clicked, the user is asked for confirmation to\ndelete the key in question.\n\n![Delete array key confirm](images/edit-delete-confirm.png)\n\n* Add new sub-keys\n\nClicking the plus icon adds a new numerically named key underneath the \nnested array that was clicked. When the row contains a text value, that\nvalue is discarded and a new nested array created at the chosen key.\n\n![Add new subkey](images/edit-add-new-subelement.png)\n\nThe final one is always visible as the top row:\n\n* Add new top-level keys\n\nClicking the 'Add new element' row that is displayed in edit mode adds\na new default top-level key to the array. It has a numeric key.\n\n![Add new key](images/edit-add-new.png)\n\n>**Note:** As LCB does not yet allow text input, there is no way to \n> allow a user to edit the keys and values inline. In order to provide \n> such functionality, you would have to create fields and track the \n> current `hilitedElement`.\n\n## Messages\nThe widget sends a number of messages in response to actions. When the \nunderlying data changes, a `dataChanged` message is sent. This is handy \nwhen the widget is not `readOnly` and therefore the content can be \nchanged by user interaction. \n\nThe `hiliteChanged` message is sent when the user clicks on a row to \nselect or deselect it.\n\nWhen a row is double-clicked, an `actionDoubleClick` message is sent. \nThe `actionInspect` message is sent when the inspect icon is clicked - \nthis icon is displayed when the tree view value is too long to be \ndisplayed, or contains multiple lines.\n\n![Inspect](images/action-inspect.png)"
}