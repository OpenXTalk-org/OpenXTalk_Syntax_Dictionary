{
	"name": "com.livecode.widget.spinner",
	"display name": "Spinner",
	"group": "Extensions",
	"location": "/Users/paul/Desktop/Dev Stuff/OpenXTalk 1.963.1rc5.app/Contents/Tools/Extensions/com.livecode.widget.spinner/docs/guide",
"data":"# Spinner Widget\nThe spinner widget can be used as an activity indicator, showing users \nthat your app is busy performing a task that will take some time to \ncomplete.\n\nWhen the spinner widget is visible, it spins around.  You can use the \nvisible property of the widget to control when it’s displayed to the \nuser.  Normally, it would make sense to display it in front of other \ncontent displayed on the screen.\n\n![A group of spinners](images/spinner.gif)\n\n## Creating a Spinner\nA spinner widget can be created by dragging it out from the Tools\nPalette, where it appears with the following icon:\n\n<svg viewBox=\"0 0 1800 1800\" style=\"display:block;margin:auto\" width=\"auto\" height=\"50\">\n  <path d=\"M496 1408Q496 1468 453.5 1510 411 1552 352 1552 292 1552 250 1510 208 1468 208 1408 208 1348 250 1306 292 1264 352 1264 411 1264 453.5 1306 496 1348 496 1408ZM928 1600Q928 1653 890.5 1690.5 853 1728 800 1728 747 1728 709.5 1690.5 672 1653 672 1600 672 1547 709.5 1509.5 747 1472 800 1472 853 1472 890.5 1509.5 928 1547 928 1600ZM320 960Q320 1026 273 1073 226 1120 160 1120 94 1120 47 1073 0 1026 0 960 0 894 47 847 94 800 160 800 226 800 273 847 320 894 320 960ZM1360 1408Q1360 1454 1327 1487 1294 1520 1248 1520 1202 1520 1169 1487 1136 1454 1136 1408 1136 1362 1169 1329 1202 1296 1248 1296 1294 1296 1327 1329 1360 1362 1360 1408ZM528 512Q528 585 476.5 636.5 425 688 352 688 279 688 227.5 636.5 176 585 176 512 176 439 227.5 387.5 279 336 352 336 425 336 476.5 387.5 528 439 528 512ZM992 320Q992 400 936 456 880 512 800 512 720 512 664 456 608 400 608 320 608 240 664 184 720 128 800 128 880 128 936 184 992 240 992 320ZM1536 960Q1536 1000 1508 1028 1480 1056 1440 1056 1400 1056 1372 1028 1344 1000 1344 960 1344 920 1372 892 1400 864 1440 864 1480 864 1508 892 1536 920 1536 960ZM1328 512Q1328 545 1304.5 568.5 1281 592 1248 592 1215 592 1191.5 568.5 1168 545 1168 512 1168 479 1191.5 455.5 1215 432 1248 432 1281 432 1304.5 455.5 1328 479 1328 512Z\" />\n</svg>\n\n\nAlternatively it can be created in script using:\n\n\tcreate widget as \"com.livecode.widget.spinner\"\n\n## Using the Spinner\nHere are some tips that may help you use the spinner effectively.\n\n### Ensuring the Spinner Actually Spins\nThe spinner widget will only update (rotate to its next notch) when the \nengine gets to do event processing, such as during a wait with messages \nstatement.  There are several commands and functions which implicitly \nwait with messages internally, such as the url chunk.\n\nHowever, if you are doing a slow computation, such as parsing a text \nfile or loading data from a database, you may wish to add `wait 0 with \nmessages` statement each time you make progress, so that the spinner \ncontinues to spin, and your users don’t think your app has frozen.\n\n### Making it Clear that the App is “Busy”\nYou may wish to hide or “dim” your app’s user interface while the app is \nbusy.  For example, your app could use a “splash screen” card that \ndisplays a logo and a spinner widget while loading its resources and \npreparing to run.  This helps by providing additional visual cues to the \nuser that the app’s user interface is not ready to respond yet.\n\n### Cancelling a Long-Running Activity\nSometimes, you may have a very slow process that you can safely abandon. \nIt can be useful to provide a “Cancel” button. Suppose you have a stack \nwith a cancelButton and a spinnerWidget.  You can create a cancellable \nprocess using a script-local variable to store whether the process \nshould continue:\n\n\t-- In the script of the cancelButton\n\ton mouseUp\n\t   send \"cancelOperation\"\n\tend mouseUp\n\n\t-- In the stack script\n\tlocal sCancelled\n\n\tcommand doOperation\n\t   set the visible of control \"spinnerWidget\" to true\n\t   set the visible of control \"cancelButton\" to true\n\t   put false into sCancelled\n\n\t   repeat for each item to process\n\t\t  -- (do something with the item)\n\n\t\t  -- allow the spinner widget to spin, and\n\t\t  -- for cancel button clicks to be handled\n\t\t  wait 0 with messages\n\t\t  if sCancelled then\n\t\t\t exit repeat\n\t\t  end if\n\t   end repeat\n\n\t   if not sCancelled then\n\t\t  -- (update the UI to reflect the results)\n\t   end if\n\t   set the visible of control \"spinnerWidget\" to false\n\t   set the visible of control \"cancelButton\" to false\n\tend doOperation\n\t\n### Indicating Background Processing\nSometimes your app may need to do some background processing, such as \nsynchronising its state with a server, without needing to block the user \ninterface.  You may wish to use a spinner widget in a peripheral part of \nthe user interface, such as a status bar, to provide an unobtrusive \nindication that this is going on.\n\nFor example, an e-mail app might regularly check for new messages, but \nthat shouldn’t necessarily block the user from carrying on reading or \nwriting e-mails."
}