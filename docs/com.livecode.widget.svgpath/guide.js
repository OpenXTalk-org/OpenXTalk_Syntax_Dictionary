{
	"name": "com.livecode.widget.svgpath",
	"display name": "SVG Icon",
	"group": "Extensions",
	"location": "/Users/paul/Desktop/Dev Stuff/OpenXTalk 1.963.1rc5.app/Contents/Tools/Extensions/com.livecode.widget.svgpath/docs/guide",
"data":"# SVG Path Widget\nThe SVG path widget can be used to display simple SVG paths. It has a \nnumber of properties which control how the path is displayed.\n\n![SVG Path widget](images/svgpath.png)\n\n## Creating an SVG Path\nAn SVG path widget can be created by dragging it out from the Tools\nPalette, where it appears with the following icon:\n\n<svg viewBox=\"0 0 65 40\" style=\"display:block;margin:auto\" width=\"auto\" height=\"50\">\n  <path d=\"M61.8,0H4C1.8,0,0,1.8,0,4v27.8c0,2.2,1.8,4,4,4h57.8c2.2,0,4-1.8,4-4V4C65.8,1.8,64,0,61.8,0z M20.9,25.3c-1.2,0.9-2.8,1.4-4.9,1.4c-0.8,0-1.6-0.1-2.2-0.2c-0.7-0.1-1.3-0.3-1.9-0.5c-0.1,0.2-0.3,0.4-0.5,0.5s-0.5,0.2-0.8,0.2c-0.6,0-1-0.1-1.2-0.3c-0.2-0.2-0.4-0.6-0.4-1.2l-0.1-3.2v-0.2c0-0.6,0.1-1,0.3-1.3c0.2-0.2,0.6-0.4,1.2-0.4c0.6,0,1.1,0.4,1.5,1.3c0.1,0.2,0.2,0.4,0.2,0.5c0.4,0.7,0.9,1.2,1.5,1.6c0.6,0.4,1.4,0.5,2.4,0.5c0.8,0,1.5-0.2,2-0.5c0.5-0.4,0.7-0.8,0.7-1.5c0-1-1.1-1.7-3.2-2.2c-0.6-0.1-1.1-0.3-1.5-0.4c-1.8-0.5-3-1.1-3.7-1.8c-0.7-0.7-1-1.7-1-2.9c0-1.6,0.6-2.9,1.8-3.9c1.2-1,2.7-1.5,4.6-1.5c0.6,0,1.2,0.1,1.8,0.2c0.6,0.1,1.2,0.3,1.8,0.6c0.1-0.3,0.3-0.5,0.5-0.6c0.2-0.1,0.4-0.2,0.8-0.2c0.5,0,0.9,0.1,1,0.3c0.2,0.2,0.2,0.6,0.3,1.2l0.1,2.7v0.2c0,0.5-0.1,0.9-0.3,1.1c-0.2,0.2-0.6,0.3-1.1,0.3c-0.7,0-1.1-0.4-1.5-1.1c0-0.1-0.1-0.2-0.1-0.2c-0.3-0.6-0.7-1-1.2-1.3c-0.5-0.3-1.1-0.4-1.7-0.4c-0.8,0-1.5,0.2-2,0.6s-0.8,0.9-0.8,1.5c0,0.8,1.2,1.5,3.5,2c0.4,0.1,0.7,0.1,0.9,0.2c1.8,0.4,3.1,1,3.8,1.8c0.8,0.8,1.2,1.9,1.2,3.2C22.6,23.1,22,24.4,20.9,25.3zM40.9,12.5c-0.3,0.3-0.6,0.4-1.1,0.4h-0.2l-4.2,12c-0.2,0.6-0.4,1-0.6,1.1s-0.6,0.2-1.1,0.2h-1.7c-0.8,0-1.4-0.4-1.7-1.3l0-0.1l-4.3-12h-0.2c-0.5,0-0.8-0.1-1.1-0.4s-0.4-0.6-0.4-1.1c0-0.6,0.1-0.9,0.4-1.2s0.7-0.4,1.3-0.4H30c0.6,0,1,0.1,1.3,0.4c0.3,0.2,0.4,0.6,0.4,1.2c0,0.5-0.1,0.9-0.4,1.2c-0.3,0.2-0.7,0.4-1.3,0.4h-0.4l3.3,9.8l3.4-9.8H36c-0.6,0-1-0.1-1.3-0.4c-0.3-0.2-0.4-0.6-0.4-1.2c0-0.5,0.1-0.9,0.4-1.2c0.3-0.2,0.7-0.4,1.3-0.4h3.5c0.6,0,1.1,0.1,1.3,0.4c0.3,0.2,0.4,0.6,0.4,1.2C41.3,11.9,41.2,12.2,40.9,12.5z M57.8,20.6c-0.3,0.3-0.6,0.4-1.1,0.4h-0.2v3.3v0.2c0,0.3,0,0.5-0.1,0.6s-0.2,0.2-0.4,0.4c-0.5,0.3-1.4,0.6-2.5,0.8c-1.1,0.2-2.3,0.4-3.5,0.4c-2.4,0-4.4-0.8-5.9-2.4c-1.5-1.6-2.2-3.7-2.2-6.2c0-2.5,0.8-4.5,2.3-6.2c1.5-1.6,3.4-2.5,5.8-2.5c0.6,0,1.3,0.1,1.9,0.2s1.3,0.4,2,0.7c0.2-0.3,0.4-0.6,0.6-0.7c0.2-0.1,0.4-0.2,0.7-0.2c0.5,0,0.8,0.1,1,0.4c0.2,0.2,0.3,0.6,0.3,1.2l0,3.6c0,0.6-0.1,1.1-0.3,1.3c-0.2,0.2-0.6,0.3-1.1,0.3c-0.4,0-0.7-0.1-0.9-0.3c-0.2-0.2-0.4-0.5-0.5-1C53.3,14,53,13.4,52.5,13s-1.2-0.6-2.2-0.6c-1.4,0-2.5,0.5-3.3,1.4c-0.8,1-1.1,2.3-1.1,4.2s0.4,3.2,1.2,4.2c0.8,1,1.9,1.5,3.4,1.5c0.3,0,0.7,0,1.1-0.1c0.4-0.1,0.9-0.2,1.5-0.4V21h-1.6c-0.6,0-1.1-0.1-1.3-0.3c-0.3-0.2-0.4-0.6-0.4-1.1c0-0.6,0.1-0.9,0.4-1.2s0.7-0.4,1.3-0.4h5c0.6,0,1.1,0.1,1.4,0.3s0.4,0.6,0.4,1.2C58.2,20,58.1,20.4,57.8,20.6z\" />\n</svg>\n\n\nAlternatively it can be created in script using:\n\n\tcreate widget as \"com.livecode.widget.svgpath\"\n\n## Paths\nThe SVG path displayed by the widget is either one of the named ‘preset’ \npaths, or any basic SVG path. Setting either the `iconPresetName` \nproperty or the `iconPath` property will override any setting of the \nother property. The `iconPresetName` is one of the preset icons which \ncan be listed using the `iconNames()` function, or selected via the \nproperty inspector. Clicking the currently set icon in the property \ninspector will bring up the icon picker, allowing you to pick one of the \npreset icons. Setting one of the preset icons will cause its iconPath \nproperty to be set to the path of the current icon. If there is no \npreset path that fulfils your requirements then you’ll have to set the \n`iconPath` property to the SVG path of the image you want. Some \ninformation on extracting valid SVG paths from images are discussed at \nthe end of this post.\n\n## Highlighting\nThe `hilite` property can be used to alter the appearance of the svg \npath widget to indicate it has been clicked, for example. The fill color \nof a highlighted svg path widget is determined by its `hiliteColor`.\nAlthough this effect can also be achieved by changing the `foreColor` \nproperty, the advantage of setting the `hilite` property is that the \n`hiliteColor`, if empty, will be inherited. Thus you can ensure \nconsistency of highlight colors by setting the `hiliteColor` of the \ngroup or stack containing the widget.\n\n![Hilited SVG Path widget](images/hilite.png)\n\n## Rotation and Reflection\nThe `angle` property can be used to rotate an svg path. This can be \nhandy if you need to tweak one of the preset paths, for example to make \na finger point at something from a slightly different direction:\n\n![Rotated SVG Path widget](images/rotated.png)\n\nThe `flipped` property can be used similarly. For example, here it is \nused in conjunction with the `angle` property to make a fire \nextinguisher icon face the other way.\n\n![Flipped SVG Path widget](images/fireext.png)\n\n## Aspect Ratio\nThe `maintainAspectRatio` property determines whether the path is \nstretched to fit the object bounds or not. For example, the cube icon \nwill always be a cube if `maintatinAspectRatio` is true, but can be \nstretched to a cuboid if not.\n\n![SVG Path widget maintain aspect ratio](images/aspect.png)\n\n## Fill Rule\nSVG paths can cross over themselves, which causes an ambiguity when \ndetermining what exactly constitutes the interior of the path (for \nfilling purposes). The `fillRule` property controls how the engine \nchooses what to fill. Take for example a five-pointed star, defined in a \nsimple way using a moveTo command and five lineTo commands, e.g.\n\n\tM4,47h117l-95,69 36-111 36,111z\n\nThe two available fill rules work by determining how many path segments \nare crossed by a straight line going infinitely in one direction from a \ngiven enclosed region. Using the above example, starting anywhere inside \nthe central pentagon of the star, such a line would always cross 2 path \nsegments. The ‘even odd’ fill rule states that a region should be filled \nif this number is even, and not filled if it is odd. The ‘non-zero’ fill \nrule states that a region should be filled if this number is non-zero.\n\nSo for the five-pointed star example above, we have the following \nresults:\n\n![SVG Path widget fill rule](images/fill-rule.png)\n\n## Width and Height\nAll LiveCode objects have width and height properties, and the SVG path \nwidget is no different. However, these do not necessarily reflect the \nactual bounds of what is drawn – for example if the \n`maintainAspectRatio` property is set to true, as can be seen in the \ncube / cuboid example above, there may be a significant difference. \nThe SVG path widget has read-only `scaledWidth` and `scaledHeight` \nproperties which return the width and height of the path as it is \ncurrently being rendered.\n\n## How to Get SVG Paths\nMany image manipulation programs allow images to be exported as SVG, and \nthere are many SVG files available online, for example at Open Clipart, \nhowever these cannot always be converted into simple SVG paths.\n\nIf an SVG file consists of a simple polyline element, you can often \nconvert it to the correct form by putting M (moveTo command) before the \nfirst co-ordinate, L (lineTo command) before the second co-ordinate, and \nadding Z (closePath command) at the end. This works for example when \ncreating a polyline svg using an online drawing website such as Vector \nPaint.\n\nSee the following forum post for more information on extracting simple \npaths from SVG files: http://forums.livecode.com/viewtopic.php?f=8&t=27202"
}