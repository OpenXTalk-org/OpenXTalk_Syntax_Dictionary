{
	"name": "com.livecode.widget.segmented",
	"display name": "Segmented Control",
	"group": "Extensions",
	"location": "/Users/paul/Desktop/Dev Stuff/OpenXTalk 1.963.1rc5.app/Contents/Tools/Extensions/com.livecode.widget.segmented/docs/guide",
"data":"# Segmented Control Widget\nThe segmented control shows several options (“segments”), and allows one \nor more of them to be highlighted by clicking on them.  Each segment is \nidentified either by a label, or an icon.\n\n![Segmented Control widget](images/segmented.png)\n\n## Creating a Segmented Control\nA segmented control widget can be created by dragging it out from the \nTools Palette, where it appears with the following icon:\n\n<svg viewBox=\"0 0 150 30\" style=\"display:block;margin:auto\" width=\"auto\" height=\"50\">\n  <path d=\"M72.6,0H7.7C3.4,0,0,3.4,0,7.7v14c0,4.2,3.4,7.7,7.7,7.7h64.9c4.2,0,7.7-3.4,7.7-7.7v-14C80.2,3.4,76.8,0,72.6,0z M7.8,13.5h8v2.3h-8V13.5z M19.7,20.6h-12v-2.3h12V20.6z M19.7,11h-12V8.8h12V11z M27.8,25.5h-1V3.8h1V25.5z M46.1,20.6h-12v-2.3h12V20.6zM36.1,15.7v-2.3h8v2.3H36.1z M46.1,11h-12V8.8h12V11z M54.4,25.5h-1V3.8h1V25.5z M72.7,20.6h-12v-2.3h12V20.6z M72.7,15.7h-8v-2.3h8V15.7z M72.7,11h-12V8.8h12V11z\" />\n</svg>\n\n\nAlternatively it can be created in script using:\n\n\tcreate widget as \"com.livecode.widget.segmented\"\n\n## Examples\n### Controlling Text Alignment\nOne of the ways the segmented control is used in the LiveCode IDE is to \ncontrol the alignment of text.  You can find it used in that way on the \nProperty Inspector’s “Text” page for the Field control, for example.\n\n![Use in the property inspector](images/pi-text.png)\n\nTo build a similar control, create a new stack and drag a field and a \nsegmented control onto it from the tools palette.\n\nOpen the Property Inspector for the segmented control, and set the \n“Display style” (the itemStyle property) to “icons”.  This will display \nan icon for each segment, instead of a textual label.  The segmented \ncontrol is set up with the text alignment icons that you need by \ndefault.\n\nNext, set the “Segment names” to “left”, “center” and “right”.  This \n`itemNames` property allows you to associate a value or tag with each \nsegment, separately from the text that’s displayed on the control. The  \n`itemNames` and `itemLabels` can be thought of as as values that have \nmeaning to the app and to the user respectively. The segment names and \nlabels are similar to the tags and labels used by LiveCode menus.\n\nFinally, you need a script for the segmented control.  When the user \nchanges the highlight of the segmented control by clicking on one of the \nsegments, it sends the `hiliteChanged` message, and your script should \nhandle this message to change the field’s `textAlign` property.\n\n\ton hiliteChanged\n\t   set the textAlign of field 1 to the hilitedItemNames of me\n\tend hiliteChanged\n\n![Segmented control to set text align](images/text-align.png)\n\n### A 5-star Rating Control\nBy adding some script support, you can use the segmented control to \ncreate some controls that would be quite difficult to do using “classic” \nLiveCode controls.  For example, you can build a “5 star rating” control \nquite quickly.  When you click on a segment, the control will display \nfilled stars for the segment you clicked on and all the segments to the \nleft, and empty stars for all the segments to the right.\n\nCreate a new segmented control, set it to display icons, and give it 5 \nsegments.  Next, go to the “Icons” pane of the Property Inspector.  Set \nall the “Segment icons” (the `itemIcons` property) to the “empty star” \nicons, and all the “Hilited segment icons” (the hilitedItemIcons \nproperty) to the “star” icon.  You should now be able to click on \nindividual segments to have them turn from an empty star to a full star.\n\nTo get the star rating to work properly, however, it’ll be necessary to \nallow multiple segments to be highlighted. You can do this on the \n“Basic” pane of the Property Inspector by enabling the “Multiple \nhilites” (`multipleHilites`) property.\n\nThe colors can be changed on the “Colors” pane of the Property \nInspector.  Change the “Hilited segment label color” \n(`hilitedTextColor`) to blue, and the the “Selected segment color” \n(`hiliteColor`) to the same grey background colour as used for the \n“Segment color” (`backColor`).\n\nThe final part is to add a script that hooks this all together, and \nmakes sure that the correct segments are highlighted when the user \nclicks on the control by responding to the `hiliteChanged` message. The \n`hilitedItems` property contains the segment numbers that are \nhighlighted.\n\nThe script first checks which segment was clicked, and then creates a \nnew value for the `hilitedItems` that includes all the segments up to \nand including the clicked segment.\n\n\tlocal sRating\n\ton hiliteChanged\n\t   local tHilited\n\t   -- Find the rightmost item that changed.  This is\n\t   -- the segment that the user clicked\n\t   put the hilitedItems of me into tHilited\n\t   repeat with tSegment = the itemCount of me down to 1\n\t\t  if tSegment is among the items of tHilited then\n\t\t\t if tSegment > sRating then\n\t\t\t\tput tSegment into sRating\n\t\t\t\texit repeat\n\t\t\t end if\n\t\t  else\n\t\t\t if tSegment <= sRating then\n\t\t\t\tput tSegment into sRating\n\t\t\t\texit repeat\n\t\t\t end if\n\t\t  end if    \n\t   end repeat\n   \n\t   -- Highlight all the segments up to and\n\t   -- including the one that was clicked\n\t   local tNewHilite\n\t   repeat with tSegment = 1 to sRating\n\t\t  put tSegment & comma after tNewHilite\n\t   end repeat\n\t   -- Remove trailing comma\n\t   delete char -1 of tNewHilite\n\t   set the hilitedItems of me to tNewHilite\n\tend hiliteChanged\n\n![A 5-star rating control](images/star-rating.png)\n\n## Additional Uses\nThere are many other good uses for the segmented control: you can use it \nfor switching between cards, as a row of options that can be toggled, or \npossibly even to create an upvote/downvote control in a forum \ncomment-viewing app."
}